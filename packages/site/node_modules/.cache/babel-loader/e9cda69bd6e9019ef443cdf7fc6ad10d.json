{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SPLITTER_CLASSNAME } from \"./constants\";\nimport { division } from \"./styles\";\n\nfunction useWindowSplitter(options) {\n  const [size, setSize] = React.useState(0);\n  const ref = React.useRef(null);\n  const closed = React.useRef(true);\n\n  const unclosed = e => e.target.className === SPLITTER_CLASSNAME && (closed.current = false);\n\n  const close = () => closed.current = true;\n\n  const onMouseMove = e => {\n    if (closed.current) {\n      return;\n    }\n\n    setSize(size + e.movementX);\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      const rect = ref.current.getBoundingClientRect(); // returns the size of an element and its position relative to the viewport.\n\n      const widthInit = rect.width / 2;\n      setSize(widthInit);\n    }\n  }, [options.layout]);\n  let containerStyle, mainPaneStyle, divisionStyle, secondPaneStyle;\n  mainPaneStyle = {\n    width: size,\n    height: \"100%\",\n    ...mainPaneStyle\n  };\n  divisionStyle = {\n    width: 10,\n    height: \"100%\",\n    cursor: \"col-resize\",\n    ...division\n  };\n  containerStyle = {\n    flexDirection: \"row\",\n    ...containerStyle\n  };\n  secondPaneStyle = secondPaneStyle;\n  return {\n    containerProps: {\n      onMouseDown: unclosed,\n      onMouseUp: close,\n      onMouseLeave: close,\n      onMouseMove,\n      ref: ref,\n      style: containerStyle\n    },\n    mainPaneProps: {\n      style: mainPaneStyle\n    },\n    splitterProps: {\n      style: divisionStyle,\n      className: SPLITTER_CLASSNAME\n    },\n    secondPaneProps: {\n      style: secondPaneStyle\n    }\n  };\n}\n\nexport default useWindowSplitter;","map":{"version":3,"sources":["/Users/dbarabashdev/dev/engineer/window-split/window-splitter/packages/lib/dist/WindowSplitter/useWindowSplitter.js"],"names":["React","useEffect","SPLITTER_CLASSNAME","division","useWindowSplitter","options","size","setSize","useState","ref","useRef","closed","unclosed","e","target","className","current","close","onMouseMove","movementX","rect","getBoundingClientRect","widthInit","width","layout","containerStyle","mainPaneStyle","divisionStyle","secondPaneStyle","height","cursor","flexDirection","containerProps","onMouseDown","onMouseUp","onMouseLeave","style","mainPaneProps","splitterProps","secondPaneProps"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,kBAAT,QAAmC,aAAnC;AACA,SAASC,QAAT,QAAyB,UAAzB;;AACA,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AAChC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,KAAK,CAACQ,QAAN,CAAe,CAAf,CAAxB;AACA,QAAMC,GAAG,GAAGT,KAAK,CAACU,MAAN,CAAa,IAAb,CAAZ;AACA,QAAMC,MAAM,GAAGX,KAAK,CAACU,MAAN,CAAa,IAAb,CAAf;;AACA,QAAME,QAAQ,GAAIC,CAAD,IAAOA,CAAC,CAACC,MAAF,CAASC,SAAT,KAAuBb,kBAAvB,KAA8CS,MAAM,CAACK,OAAP,GAAiB,KAA/D,CAAxB;;AACA,QAAMC,KAAK,GAAG,MAAON,MAAM,CAACK,OAAP,GAAiB,IAAtC;;AACA,QAAME,WAAW,GAAIL,CAAD,IAAO;AACvB,QAAIF,MAAM,CAACK,OAAX,EAAoB;AAChB;AACH;;AACDT,IAAAA,OAAO,CAACD,IAAI,GAAGO,CAAC,CAACM,SAAV,CAAP;AACH,GALD;;AAMAlB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIQ,GAAG,CAACO,OAAR,EAAiB;AACb,YAAMI,IAAI,GAAGX,GAAG,CAACO,OAAJ,CAAYK,qBAAZ,EAAb,CADa,CACqC;;AAClD,YAAMC,SAAS,GAAGF,IAAI,CAACG,KAAL,GAAa,CAA/B;AACAhB,MAAAA,OAAO,CAACe,SAAD,CAAP;AACH;AACJ,GANQ,EAMN,CAACjB,OAAO,CAACmB,MAAT,CANM,CAAT;AAOA,MAAIC,cAAJ,EAAoBC,aAApB,EAAmCC,aAAnC,EAAkDC,eAAlD;AACAF,EAAAA,aAAa,GAAG;AACZH,IAAAA,KAAK,EAAEjB,IADK;AAEZuB,IAAAA,MAAM,EAAE,MAFI;AAGZ,OAAGH;AAHS,GAAhB;AAKAC,EAAAA,aAAa,GAAG;AACZJ,IAAAA,KAAK,EAAE,EADK;AAEZM,IAAAA,MAAM,EAAE,MAFI;AAGZC,IAAAA,MAAM,EAAE,YAHI;AAIZ,OAAG3B;AAJS,GAAhB;AAMAsB,EAAAA,cAAc,GAAG;AAAEM,IAAAA,aAAa,EAAE,KAAjB;AAAwB,OAAGN;AAA3B,GAAjB;AACAG,EAAAA,eAAe,GAAGA,eAAlB;AACA,SAAO;AACHI,IAAAA,cAAc,EAAE;AACZC,MAAAA,WAAW,EAAErB,QADD;AAEZsB,MAAAA,SAAS,EAAEjB,KAFC;AAGZkB,MAAAA,YAAY,EAAElB,KAHF;AAIZC,MAAAA,WAJY;AAKZT,MAAAA,GAAG,EAAEA,GALO;AAMZ2B,MAAAA,KAAK,EAAEX;AANK,KADb;AASHY,IAAAA,aAAa,EAAE;AAAED,MAAAA,KAAK,EAAEV;AAAT,KATZ;AAUHY,IAAAA,aAAa,EAAE;AAAEF,MAAAA,KAAK,EAAET,aAAT;AAAwBZ,MAAAA,SAAS,EAAEb;AAAnC,KAVZ;AAWHqC,IAAAA,eAAe,EAAE;AAAEH,MAAAA,KAAK,EAAER;AAAT;AAXd,GAAP;AAaH;;AACD,eAAexB,iBAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { SPLITTER_CLASSNAME } from \"./constants\";\nimport { division } from \"./styles\";\nfunction useWindowSplitter(options) {\n    const [size, setSize] = React.useState(0);\n    const ref = React.useRef(null);\n    const closed = React.useRef(true);\n    const unclosed = (e) => e.target.className === SPLITTER_CLASSNAME && (closed.current = false);\n    const close = () => (closed.current = true);\n    const onMouseMove = (e) => {\n        if (closed.current) {\n            return;\n        }\n        setSize(size + e.movementX);\n    };\n    useEffect(() => {\n        if (ref.current) {\n            const rect = ref.current.getBoundingClientRect(); // returns the size of an element and its position relative to the viewport.\n            const widthInit = rect.width / 2;\n            setSize(widthInit);\n        }\n    }, [options.layout]);\n    let containerStyle, mainPaneStyle, divisionStyle, secondPaneStyle;\n    mainPaneStyle = {\n        width: size,\n        height: \"100%\",\n        ...mainPaneStyle,\n    };\n    divisionStyle = {\n        width: 10,\n        height: \"100%\",\n        cursor: \"col-resize\",\n        ...division,\n    };\n    containerStyle = { flexDirection: \"row\", ...containerStyle };\n    secondPaneStyle = secondPaneStyle;\n    return {\n        containerProps: {\n            onMouseDown: unclosed,\n            onMouseUp: close,\n            onMouseLeave: close,\n            onMouseMove,\n            ref: ref,\n            style: containerStyle,\n        },\n        mainPaneProps: { style: mainPaneStyle },\n        splitterProps: { style: divisionStyle, className: SPLITTER_CLASSNAME },\n        secondPaneProps: { style: secondPaneStyle },\n    };\n}\nexport default useWindowSplitter;\n"]},"metadata":{},"sourceType":"module"}