{"version":3,"sources":["../../lib/dist/WindowSplitter/styles.js","../../lib/dist/WindowSplitter/useWindowSplitter.js","../../lib/dist/WindowSplitter/constants.js","../../lib/dist/WindowSplitter/index.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["constantContainerStyle","display","height","overflow","constantMainPaneStyle","division","background","constantSecondPaneStyle","flexGrow","flex","useWindowSplitter","options","containerStyle","mainPaneStyle","divisionStyle","React","useState","size","setSize","ref","useRef","closed","close","current","useEffect","widthInit","getBoundingClientRect","width","layout","cursor","flexDirection","containerProps","onMouseDown","e","target","className","onMouseUp","onMouseLeave","onMouseMove","movementX","style","mainPaneProps","splitterProps","secondPaneProps","WindowSplitter","props","createElement","Fragment","Object","assign","children","Container","styled","div","Box","App","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAAMA,EAAyB,CAC3BC,QAAS,OACTC,OAAQ,OACRC,SAAU,QAERC,EAAwB,CAC1BD,SAAU,QAERE,EAAW,CACbC,WAAY,QAEVC,EAA0B,CAC5BC,SAAU,EACVL,SAAU,OACVM,KAAM,SCoCKC,MA/Cf,SAA2BC,GAAS,IAmB5BC,EAAgBC,EAAeC,EAnBH,EACRC,IAAMC,SAAS,GADP,mBACzBC,EADyB,KACnBC,EADmB,KAE1BC,EAAMJ,IAAMK,OAAO,MACnBC,EAASN,IAAMK,QAAO,GAEtBE,EAAQ,kBAAOD,EAAOE,SAAU,GA4BtC,OArBAC,qBAAU,WACN,GAAIL,EAAII,QAAS,CACb,IACME,EADON,EAAII,QAAQG,wBACFC,MAAQ,EAC/BT,EAAQO,MAEb,CAACd,EAAQiB,SAEZf,EAAgB,aACZc,MAAOV,EACPf,OAAQ,QACLE,GAEPU,EAAgB,aACZa,MAAO,GACPzB,OAAQ,OACR2B,OAAQ,cACLxB,GAEPO,EAAiB,aAAEkB,cAAe,OAAU9B,GAErC,CACH+B,eAAgB,CACZC,YA/BS,SAACC,GAAD,MCPM,uBDOCA,EAAEC,OAAOC,YAAqCd,EAAOE,SAAU,IAgC/Ea,UAAWd,EACXe,aAAcf,EACdgB,YAhCY,SAACL,GACbZ,EAAOE,SAGXL,EAAQD,EAAOgB,EAAEM,YA6BbpB,IAAKA,EACLqB,MAAO5B,GAEX6B,cAAe,CAAED,MAAO3B,GACxB6B,cAAe,CAAEF,MAAO1B,EAAeqB,UC9CpB,sBD+CnBQ,gBAAiB,CAAEH,MAZLjC,KEjCTqC,EAAiB,SAACC,GAAU,MACqCnC,EAAkB,CACxFkB,OAAQiB,EAAMjB,SADVG,EAD6B,EAC7BA,eAAgBU,EADa,EACbA,cAAeC,EADF,EACEA,cAAeC,EADjB,EACiBA,gBAGtD,OAAQ5B,IAAM+B,cAAcC,WAAU,KAClChC,IAAM+B,cAAc,MAAOE,OAAOC,OAAO,GAAIlB,GACzChB,IAAM+B,cAAc,MAAOE,OAAOC,OAAO,GAAIR,GAAgBI,EAAMK,SAAS,IAC5EnC,IAAM+B,cAAc,MAAOE,OAAOC,OAAO,GAAIP,IAC7C3B,IAAM+B,cAAc,MAAOE,OAAOC,OAAO,GAAIN,GAAkBE,EAAMK,SAAS,O,0LCN1F,IAAMC,EAAYC,IAAOC,IAAV,KAKTC,EAAMF,IAAOC,IAAV,KAyCME,MAvCf,WACE,OACE,kBAACJ,EAAD,KACE,kBAAC,EAAD,KACE,kBAACG,EAAD,CAAKd,MAAO,CAAElC,WAAY,gBAAiBkD,MAAO,UAAlD,21CAaiE,KAEjE,kBAACF,EAAD,CAAKd,MAAO,CAAElC,WAAY,OAAQkD,MAAO,UAAzC,+1CClBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8b815304.chunk.js","sourcesContent":["const constantContainerStyle = {\n    display: \"flex\",\n    height: \"100%\",\n    overflow: \"auto\",\n};\nconst constantMainPaneStyle = {\n    overflow: \"auto\",\n};\nconst division = {\n    background: \"#ccc\",\n};\nconst constantSecondPaneStyle = {\n    flexGrow: 1,\n    overflow: \"auto\",\n    flex: \"1 0 0\",\n};\nexport { constantContainerStyle, constantMainPaneStyle, division, constantSecondPaneStyle };\n","import React, { useEffect } from \"react\";\nimport { SPLITTER_CLASSNAME } from \"./constants\";\nimport { constantContainerStyle, constantMainPaneStyle, division, constantSecondPaneStyle } from \"./styles\";\nfunction useWindowSplitter(options) {\n    const [size, setSize] = React.useState(0);\n    const ref = React.useRef(null);\n    const closed = React.useRef(true);\n    const unclosed = (e) => e.target.className === SPLITTER_CLASSNAME && (closed.current = false);\n    const close = () => (closed.current = true);\n    const onMouseMove = (e) => {\n        if (closed.current) {\n            return;\n        }\n        setSize(size + e.movementX);\n    };\n    useEffect(() => {\n        if (ref.current) {\n            const rect = ref.current.getBoundingClientRect(); // returns the size of an element and its position relative to the viewport.\n            const widthInit = rect.width / 2;\n            setSize(widthInit);\n        }\n    }, [options.layout]);\n    let containerStyle, mainPaneStyle, divisionStyle, secondPaneStyle;\n    mainPaneStyle = {\n        width: size,\n        height: \"100%\",\n        ...constantMainPaneStyle,\n    };\n    divisionStyle = {\n        width: 10,\n        height: \"100%\",\n        cursor: \"col-resize\",\n        ...division,\n    };\n    containerStyle = { flexDirection: \"row\", ...constantContainerStyle };\n    secondPaneStyle = constantSecondPaneStyle;\n    return {\n        containerProps: {\n            onMouseDown: unclosed,\n            onMouseUp: close,\n            onMouseLeave: close,\n            onMouseMove,\n            ref: ref,\n            style: containerStyle,\n        },\n        mainPaneProps: { style: mainPaneStyle },\n        splitterProps: { style: divisionStyle, className: SPLITTER_CLASSNAME },\n        secondPaneProps: { style: secondPaneStyle },\n    };\n}\nexport default useWindowSplitter;\n","const SPLITTER_CLASSNAME = \"ui-window-splitter\";\nexport { SPLITTER_CLASSNAME };\n","import React, { Fragment } from \"react\";\nimport useWindowSplitter from \"./useWindowSplitter\";\nexport const WindowSplitter = (props) => {\n    const { containerProps, mainPaneProps, splitterProps, secondPaneProps } = useWindowSplitter({\n        layout: props.layout,\n    });\n    return (React.createElement(Fragment, null,\n        React.createElement(\"div\", Object.assign({}, containerProps),\n            React.createElement(\"div\", Object.assign({}, mainPaneProps), props.children[0]),\n            React.createElement(\"div\", Object.assign({}, splitterProps)),\n            React.createElement(\"div\", Object.assign({}, secondPaneProps), props.children[1]))));\n};\n","import React from \"react\"\nimport { WindowSplitter } from \"window-splitter\"\nimport styled from \"styled-components\"\n\nconst Container = styled.div`\n  height: 600px;\n  overflow: \"auto\";\n`\n\nconst Box = styled.div``\n\nfunction App() {\n  return (\n    <Container>\n      <WindowSplitter>\n        <Box style={{ background: \"palevioletred\", color: \"white\" }}>\n          Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum\n          sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies\n          nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel,\n          aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam\n          dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean\n          vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem\n          ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque\n          rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui.\n          Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing\n          sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et\n          ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci\n          eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed\n          consequat, leo eget bibendum sodales, augue velit cursus nunc,{\" \"}\n        </Box>\n        <Box style={{ background: \"blue\", color: \"white\" }}>\n          Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum\n          sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies\n          nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel,\n          aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam\n          dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean\n          vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem\n          ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque\n          rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui.\n          Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing\n          sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et\n          ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci\n          eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed\n          consequat, leo eget bibendum sodales, augue velit cursus nunc,\n        </Box>\n      </WindowSplitter>\n    </Container>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}